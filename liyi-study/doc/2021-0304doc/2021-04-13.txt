学习进度：





疑难点：
1.extend 一旦子类继承了父类，子类就可以使用父类中声明的结构:属性、方法(包括私有的)，只是不能直接调用
1.1.子类继承父类后，还可以声明自己特有的属性或方法，实现功能的拓展
1.2.一个类可以被多个子类继承(java中类的单继承性)，一个子类只能有一个父类
1.3.子父类是相对的概念
1.4.子类直接继承的父类称为：直接父类，间接继承的父类称为：间接父类
1.5.子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法
1.6.所有的java类都直接或间接的继承于java.lang.object类，意味着所有的类都具有object类声明的功能


2.方法的重写（override）
2.1.重写：子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作
2.2.应用：当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类中重写父类的方法
2.3重写的规定：
            方法的声明：权限修饰符 返回值类型 方法名（形参列表）{
                      方法体
            }
            ①子类重写的方法的方法名和形参列表与父类中被重写的方法的方法名和形参列表相同
            ②子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符
             特殊情况：子类中不能重写父类中声明为private的方法
            ③返回值类型：
                       1.父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void
                       2.父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类
                       3.父类被重写的方法的返回值是基本数据类型，则子类重写的方法的返回值类型必须是相同的
            ④子类重写的方法跑出的异常类型，不大于父类被重写的方法的异常类型

3.super的使用
3.1.我们可以在子类的方法或构造器中，使用“super.属性”或“super.方法”的方式调用父类中声明的属性或方法。
    但是，在通常情况下，我们习惯省略“super”
3.2.特殊情况：当子类和父类汇总定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用“super.属性”
    的方式，表明调用的是父类中被重写的方法
3.3.特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用“super.方法”
    的方式，表明调用的是父类中被重写的方法

4.对象的多态性：父类的引用指向子类的对象
  4.1.多态的使用：当调用子父类同名同参的方法时，实际执行的是子类重写父类的方法--虚拟方法调用
                有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，
                我们实际执行的是子类重写父类的方法
      总结：编译，看左边；运行，看右边
  4.2.多态性的使用前提：
                    ①类的继承关系 ②方法的重写
  4.3.多态性只适用于方法，不适用于属性
