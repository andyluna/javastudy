学习进度：


疑难点：

1.static关键字的使用：
1.1.static可以用来修饰属性、方法、代码块、内部类

1.2.使用static修饰属性：静态变量（类变量）
    按是否使用static修饰，又分为：静态属性和非静态属性（实例变量）
    ①实例变量：我们创建了类的多个对象，每个对象都独立拥有一套类中的非静态属性、当修改其中一个对象中的非静态属性时，
    不会导致其他对象中同样的属性值的修改。
    ②静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量，当通过某一个对象修改静态变量时，会导致其他对象
    调用此静态变量时，是修改过了的。

1.3.static修饰属性的其他说明：
    ①静态变量随着类的加载而加载，可以通过"类.静态变量"的方式进行调用
    ②静态变量早于对象的创建
    ③由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中

1.4.使用static修饰方法：静态方法
    ①随着类的加载而加载，可以通过"类.静态方法"的方式进行调用
    ②静态方法中，只能调用静态的方法或属性；非静态方法中，既可以调用非静态的方法或属性，
    也可以调用静态的方法或属性

1.5.static注意点：
    ①在静态方法内，不能使用this关键字、super关键字
    ②操作静态属性的方法，通常设置为static的
    ③工具内中的方法，习惯上声明为static的


2.单例模式：区别饿汉式和懒汉式
  class Bank{

      //私有化的构造器
      private Bank(){

      }

      //内部类创建类的对象，要求此对象也必须声明为静态的
      private static Bank instance=new Bank();

      //提供公共的静态的方法，返回类的对象
      public static Bank getInstance(){
          return instance;
      }
  }

3.代码块{...}   总结：由父及子，静态先行
3.1.代码块的作用：用来初始化类、对象

3.2.代码块只能使用static修饰
    ①静态代码块：内部可以有输出语句，随着类的加载而执行，而且只会执行一次；
               如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行；
               静态代码块的执行优先于非静态代码块；
               静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构

          作用：可以初始化类的信息
    ②非静态代码块：内部可以有输出语句，随着对象的创建而执行，每创建一个对象就执行一次；
                 静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法
          作用：可以在创建对象时，对对象的属性等进行初始化


4.final关键字
4.1.用来修饰一个类:此类不能被其他类所继承

4.2.用来修饰一个方法：此方法不能被重写

4.3.用来修饰变量：此时的变量就称为一个常量
    ①final修饰属性：可以考虑赋值的位置有：显式初始化、代码块中赋值、构造器中赋值、
    ②final修饰局部变量：当final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。
                     一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值
    ③static final 用来修饰属性：全局常量




