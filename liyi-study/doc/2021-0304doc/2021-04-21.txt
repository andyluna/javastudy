学习进度：

E:\学习-尚硅谷\1.尚硅谷全套JAVA教程--基础阶段（73.36GB）\1.尚硅谷宋红康Java核心基础_好评如潮\
Java基础全套视频教程\day20_常用类10


疑难点：
1.Thread中的常用方法：
 >start():启动当前线程；调用当前线

 程的run()
 >run():通常要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中
 >currentThread():静态方法，返回执行当前代码的线程
 >getName():获取当前线程的名字
 >setName():设置当前线程的名字 还可以通过构造器命名
 >yield():释放当前cpu的执行权
 >join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，知道线程b完全执行完后，线程a才结束阻塞状态
 >stop():强制结束当前线程
 >sleep():让线程“睡眠”指定的millitime毫秒，在指定的时间内，当前线程是阻塞状态
 >isAlive():判断当前线程是否存活

 2.线程的优先级
 >getPriority():获取线程的优先级
 >setPriority():设置线程的优先级
 说明：高优先级的线程要抢占低优先级线程cpu的执行权，但是只是从概率上讲，高优先级的线程高概率的情况下被执行，
      并不意味着只有当高优先级的线程执行完后，低优先级的才执行

 3.比较创建线程的两种方式
 开发中：优先选择Runnable接口的方式
  原 因：①实现的方式没有类的单继承的局限性
        ②更适合来处理多个线程有共享数据的情况
  联系：public class Thread implements Runnable
 相同点：两种方式都需要重写run(),将线程要执行的逻辑声明在run()中；
        目前这两种方式都是调用Thread类中的start()来启动线程

 4.同步机制来解决线程的安全问题
   ①synchronized(同步监视器){
   //需要被同步的代码
   }
   说明：
   1.操作共享数据的代码，即为需要被同步的代码
   2.共享数据：多个线程共同操作的变量
   3.同步监视器：俗称锁。任何一个类的对象，都可以充当锁
     要求：多个线程必须共用同一把锁

   ②同步方法

5.线程通信
5.1.wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器
5.2.notify():一旦执行此方法，就会唤醒被wait的一个线程，如果有多个线程被wait，就优先唤醒优先级高的
5.3.notifyAll():唤醒所有被wait的线程

说明：
1.这三个方法必须使用在同步代码块或同步方法中
2.这三个方法的调用者，必须是同步代码块或同步方法中的同步监视器
3.这三个方法定义在java.lang.Object类中

6.线程池
好处：提高响应速度（减少创建新线程的时间）
     降低资源消耗（重复利用线程池中线程，不需要每次都创建）
     便于线程管理

7.Callable创建线程

8.String
8.1.常量与常量的拼接结果在常量池,且常量池中不会存在相同内容的常量;
    只要其中一个是变量，结果就在堆中；
    如果拼接的结果调用inter()方法。返回值就在常量池中