学习进度：



疑难点：
1.动态代理的实现：
1.1.需要解决的两个问题：
  问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。
     (通过Proxy.newProxyInstance()实现)
  问题二：当通过代理类对象调用方法a时，如何动态的去调用被代理类中的同名方法a
     (通过InvocationHandler接口的实现类及其方法invoke())


2.Lambda表达式
2.1.举例：  (o1,o2)--->Integer.compare(o1,o2);
2.2.格式：  Lambda操作符或箭头操作符
        左边：Lambda形参列表（其实就是接口中的抽象方法的形参列表）
        右边：Lambda体（其实就是重写的抽象方法的方法体）
    总结：
        左边：Lambda形参列表的参数类型可以省略（类型推断）；如果Lambda形参列表只有一个参数，
             其一对()也可以省略
        右边：Lambda体应该使用一对{}包裹；如果Lambda只有一条执行语句（可能是return语句），
             省略这一对{}和return关键字）

3.函数式接口：如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口；
            我们可以在一个接口上使用@FunctionInterface注解，这样做可以检查
            它是否是一个函数式接口
3.1当函数式接口实例化的时候，可以使用Lambda表达式
  Lambda表达式的实质：作为函数式接口的实例

4.Stream API的理解：
  ①Stream关注的是对数据的运算，与CPU打交道；集合关注的是数据的存储，与内存打交道

4.1.注意点：
  ①Stream 自己不会存储元素
  ②Stream 不会改变源对象，相反，他们会返回一个持有结果的新Stream
  ③Stream 操作是延迟执行的，这意味着他们会等到需要结果的时候才执行

4.2.Stream的使用流程
  ①Stream的实例化
  ②一系列的中间操作：过滤、映射
  ③终止操作

注意点：
  ①一个中间操作链，对数据源的数据进行处理
  ②一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用

5.java.util.Optional类
理解：为了解决java中的空指针问题

如：

 public String getGirlName2(Boy boy){
        Optional<Boy> boyOptional=Optional.ofNullable(boy);

        Boy boy1=boyOptional.orElse(new Boy(new Girl("花花")));

        Girl girl=boy1.getGirl();

        Optional<Girl> girlOptional=Optional.ofNullable(girl);

        Girl girl1=girlOptional.orElse(new Girl("草草"));

        return girl1.getName();
    }

    @Test
    public void test5(){
        Boy boy=null;
        boy=new Boy();
        boy=new Boy(new Girl("???"));
        String girlName=getGirlName2(boy);
        System.out.println(girlName);


    }