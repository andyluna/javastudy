<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.study.liyi.mybatis.dao.EmployeeMapper">
    <!--
    namespace:名称空间;指定为接口的全类名
    id：唯一标识
    resultType：返回值类型
    #{id}：从传递过来的参数中取出id值
     -->

    <!-- mybatis自动为Map集合起了别名map -->
    <select id="getEmpsByIdReturnMap" resultType="com.study.liyi.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <select id="getEmpByIdReturnMap" resultType="map">
        select * from tbl_employee where id = #{id}
    </select>

    <!-- resultType:如果返回是一个集合,要写集合中元素的类型 (此处因为可以用emp替换)-->
    <select id="getEmpsByLastNameList" resultType="com.study.liyi.mybatis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <select id="getEmpByIdAndLastName" resultType="emp">
    <!-- 多个参数会被封装成一个map
         key:param1...paramN,或者参数的索引
         value:传入的参数值

         命名参数:明确指定封装参数时map的key
                多个参数会被封装成一个map
                key:使用@Param注解指定的值  value:参数值
                #{指定的key}取出对应的参数值

    ##特别注意：如果是Collection（List、Set）类型或者是数组，
		 也会特殊处理。也是把传入的list或者数组封装在map中。
			key：Collection（collection）,如果是List还可以使用这个key(list)
				数组(array)
     -->
    <!-- select * from tbl_employee where id = #{param1} and last_name=#{param2} -->
        select * from tbl_employee where id = #{id} and last_name=#{lastName}

    </select>

    <select id="getEmpById" resultType="emp">
        select * from tbl_employee where id = #{id}
    </select>

    <!-- useGeneratedKeys="true" : 使用自增主键获取主键值
             keyProperty         : 指定对应的主键属性,也就是mybatis获取到主键值后,将这个值封装给javaBean的指定属性
    -->
    <insert id="addEmp" parameterType="emp" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name,email,gender)
        values(#{lastName},#{email},#{gender})
    </insert>

    <update id="updateEmp">
        update tbl_employee set last_name=#{lastName},email=#{email},gender=#{gender}
        where id=#{id}
    </update>

    <delete id="deleteEmpById" >
        delete from tbl_employee where id=#{id}
    </delete>


</mapper>