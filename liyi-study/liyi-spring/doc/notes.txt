
1.bean生命周期
    1.1.通过构造器去创建bean实例(无参构造器)
    1.2.为bean的属性设置值和对其他bean引用(调用set方法)
    1.3.把bean的实例传递给bean的后置处理器的方法     执行postProcessBeforeInitialization
    1.4.调用bean的初始化方法(需要进行配置)
    1.5.把bean的实例传递给bean的后置处理器的方法     执行postProcessAfterInitialization
    1.6.bean可以使用了(对象获取到了)
    1.7.当容器关闭的时候,调用bean的销毁的方法(需要对销毁方法进行配置)

    1.8.后置处理器:会为当前xml里配置的所有bean实例配置后置处理器


2.xml自动装配:根据指定装配规则(属性名或者属性类型),Spring自动将匹配的属性值进行注入
    2.1.bean标签属性autowire,配置自动装配,autowire属性常用两个值,
                byName根据属性名自动注入:注入值bean的id值和类属性的名称一致
                byType根据属性类型注入:相同类型的bean不能定义多个


3.Spring针对Bean管理中创建对象提供注解:
    @Component
    @Service
    @Controller
    @Repository

4.Spring基于注解方式实现属性注入
    @AutoWired:根据属性类型进行自动装配

    @Qualifier:根据属性名称进行注入,需要和@AutoWired一起进行使用

    @Resource:可以根据类型注入,也可以根据名称注入

    @Value:注入普通类型属性


5.完全注解开发
    5.1.创建配置类,代替xml配置文件
        @Configuration                                          表示作为配置类
        @ComponentScan(basePackages = (""))                     表示开启组件扫描并确定扫描的路径
        @EnableAspectJAutoProxy(proxyTargetClass = true)        开启Aspect生成代理对象


6.AOP术语:
    1.连接点:类里面哪些方法可以被增强,这些方法称为连接点

    2.切入点:实际被真正增强的方法,称为切入点
        表达式:execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))

    3.通知(增强):
        (1)实际增强的逻辑部分称为通知(增强)
        (2)通知有多钟类型
            前置通知         @Before
            后置通知         @AfterReturning
            环绕通知         @Around
            异常通知         @AfterThrowing
            最终通知         @After

    4.切面(是动作):把通知应用到切入点的过程


7.Spring进行事务操作:编程式(通过java代码)   声明式(底层使用AOP原理)
    7.1.声明式:
        7.1.1注解式 基于注解方式:
            (1)在Spring配置文件中配置事务管理器
                <!-- 创建事务管理器 -->
                <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                 <!-- 注入数据源 -->
                 <property name="dataSource" ref="dataSource"></property>
                </bean>

            (2)在Spring配置文件,开启事务注解
                1.在Spring配置文件引入名称空间tx
                    xmlns:tx="http://www.springframework.org/schema/tx"
                    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                2.开启事务注解
                    <!--开启事务注解-->
                    <tx:annotation-driven transactionManager="transactionManager"></tx:annotation-driven>

            (3)在 service 类上面（或者 service 类里面方法上面）添加事务注解 @Transactional
                1.这个注解添加到类上面，也可以添加方法上面
                2.如果把这个注解添加类上面，这个类里面所有的方法都添加事务
                3.如果把这个注解添加方法上面，为这个方法添加事务




